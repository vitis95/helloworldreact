{"ast":null,"code":"var _jsxFileName = \"/Users/vitis/workspace/helloworldreact/src/index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker'; //ReactDOM.render(<App />, document.getElementById('root'));\n// function formatName(user) {\n//     return user.firstName + ' ' + user.lastName;\n// }\n// function getGreeting(user) {\n//     if (user) {\n//         return <h1>Hello, {formatName(user)}!</h1>;\n//     }\n//     return <h1>Hello, Stranger.</h1>;   \n// }\n// const user = {\n//     firstName: 'Ivan',\n//     lastName: 'De Vita'\n// };\n// const element = (\n//     <h1>\n//         Hello, {formatName(user)}!\n//     </h1>\n// );\n//const name = \"Ivan De Vita\"\n//const element = <h1> Hello, {name}</h1>\n\n/*ReactDOM.render(\n    element,\n    document.getElementById('root')\n)*/\n// const element = <h1>Hello, world</h1>;\n// ReactDOM.render(element, document.getElementById('root'));\n//  function tick() {\n//      const element = (\n//          <div>\n//              <h1>HELLO WORLD!</h1>\n//              <h2>It is {new Date().toLocaleTimeString()}.</h2>\n//          </div>\n//      );\n//      ReactDOM.render(element, document.getElementById('root'));\n//  }\n// setInterval(tick, 1000); // ogni secondo viene chiamata la callback tick - che a sua volta chiama la funzione ReactDOM.render()\n// function ComponenteEsempio(props) {\n//     return <h1> CIAO, {props.nome}</h1>;\n// }\n// // const elemento = <Ciao nome=\"Ivan\" />;\n// // ReactDOM.render(\n// //     elemento,\n// //     document.getElementById('root')\n// // );\n// function Funzione() {\n//     return (\n//         <div>\n//             <ComponenteEsempio nome=\"Ivan\" />\n//             <ComponenteEsempio nome=\"Luca\" />\n//             <ComponenteEsempio nome=\"Mirko\" />\n//         </div>\n//     );\n// }\n// ReactDOM.render(\n//     <Funzione />,\n//     document.getElementById('root')\n// );\n// function formatDate(date) {\n//     return date.toLocaleDateString();\n// }\n// function Comment(props) {\n//     return (\n//         <div className=\"Comment\">\n//             <div className=\"UserInfo\">\n//                 <img\n//                     className=\"Avatar\"\n//                     src={props.author.avatarUrl}\n//                     alt={props.author.name}\n//                 />\n//                 <div className=\"UserInfo-name\">\n//                     {props.author.name}\n//                 </div>\n//             </div>\n//             <div className=\"Comment-text\">{props.text}</div>\n//             <div className=\"Comment-date\">\n//                 {formatDate(props.date)}\n//             </div>\n//         </div>\n//     );\n// }\n// const comment = {\n//     date: new Date(),\n//     text: 'I hope you enjoy learning React!',\n//     author: {\n//         name: 'Hello Kitty',\n//         avatarUrl: 'https://placekitten.com/g/64/64',\n//     },\n// };\n// ReactDOM.render(\n//     <Comment\n//         date={comment.date}\n//         text={comment.text}\n//         author={comment.author}\n//     />,\n//     document.getElementById('root')\n// );\n//  function tick() {\n//      const element = (\n//          <div>\n//              <h1>HELLO WORLD!</h1>\n//              <h2>It is {new Date().toLocaleTimeString()}.</h2>\n//          </div>\n//      );\n//      ReactDOM.render(\n//         element, \n//         document.getElementById('root')\n//     );\n//  }\n// setInterval(tick, 1000); // ogni secondo viene chiamata la callback tick - che a sua volta chiama la funzione ReactDOM.render()\n// function Clock(props) {\n//     return (\n//         <div>\n//             <h1>Ciao, mondo!</h1>\n//             <h2>Sono le {props.date.toLocaleTimeString()}.</h2>\n//         </div>\n//     )\n// }\n// function tick() {\n//     ReactDOM.render(\n//         <Clock />,\n//         document.getElementById('root')\n//     );\n// }\n// setInterval(tick, 1000);\n\nclass Clock extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      date: new Date()\n    };\n  } // 3. Quando l'output viene renderizzato, React invoca questo metodo - al suo intorno viene impostato un timer con cui invocare il metodo tick()\n\n\n  componentDidMount() {\n    this.timerID = setInterval(() => this.tick(), 1000);\n  } // 5. Se il componente Clock dovesse essere rimosso dal DOM, React invocherebbe questo metodo ed il timer verrebbe cancellato\n\n\n  componentWillUnmount() {\n    clearInterval(this.timerID);\n  } // 4. Ogni secondo quindi viene invocato questo metodo - ogni secondo viene cambiato lo stato e quindi React invoca ogni volta il metodo render per sapere cosa mostrare a schermo - ogni volta this.state.date avrà un valore differente e quindi verrà mostrato un output differente\n\n\n  tick() {\n    this.setState({\n      date: new Date()\n    });\n  } // 2. React invoca il metodo render - lo fa per capire cosa visualizzare a schermo - React si occupa di aggiornare il DOM in modo da farlo corrispondere all'output della renderizzazione di Clock \n\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 194\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195\n      },\n      __self: this\n    }, \"Ciao, mondo!\"), React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 196\n      },\n      __self: this\n    }, \"Sono le \", this.state.date.toLocaleTimeString(), \".\"));\n  }\n\n} // 1. Clocl viene passato a ReactDOM.render() - React invoca il costruttore di Clock - Clock ha bisogno di mostrare l'ora corrente, per cui inizializziamo lo stato con l'ora corrente - aggiorneremo in seguito lo stato \n\n\nReactDOM.render(React.createElement(Clock, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 204\n  },\n  __self: this\n}), document.getElementById('root'));\n\nclass Interruttore extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      acceso: true\n    }; // Necessario per accedere al corretto valore di `this` all'interno della callback\n\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleClick() {\n    this.setState(state => ({\n      acceso: !state.acceso\n    }));\n  }\n\n  render() {\n    return React.createElement(\"button\", {\n      onClick: this.handleClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 227\n      },\n      __self: this\n    }, this.state.acceso ? 'Acceso' : 'Spento');\n  }\n\n} // If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n\n\nserviceWorker.unregister();","map":{"version":3,"sources":["/Users/vitis/workspace/helloworldreact/src/index.js"],"names":["React","ReactDOM","App","serviceWorker","Clock","Component","constructor","props","state","date","Date","componentDidMount","timerID","setInterval","tick","componentWillUnmount","clearInterval","setState","render","toLocaleTimeString","document","getElementById","Interruttore","acceso","handleClick","bind","unregister"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAO,aAAP;AACA,OAAOC,GAAP,MAAgB,OAAhB;AACA,OAAO,KAAKC,aAAZ,MAA+B,iBAA/B,C,CAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAIA;AACA;;AACA;;;;AAKA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAIA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAGA,MAAMC,KAAN,SAAoBJ,KAAK,CAACK,SAA1B,CAAoC;AAChCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AAACC,MAAAA,IAAI,EAAE,IAAIC,IAAJ;AAAP,KAAb;AACH,GAJ+B,CAMpC;;;AACIC,EAAAA,iBAAiB,GAAG;AAChB,SAAKC,OAAL,GAAeC,WAAW,CACtB,MAAM,KAAKC,IAAL,EADgB,EAEtB,IAFsB,CAA1B;AAIH,GAZ+B,CAcpC;;;AACIC,EAAAA,oBAAoB,GAAG;AACnBC,IAAAA,aAAa,CAAC,KAAKJ,OAAN,CAAb;AACH,GAjB+B,CAmBpC;;;AACIE,EAAAA,IAAI,GAAG;AACH,SAAKG,QAAL,CAAc;AACVR,MAAAA,IAAI,EAAE,IAAIC,IAAJ;AADI,KAAd;AAGH,GAxB+B,CA0BpC;;;AACIQ,EAAAA,MAAM,GAAG;AACL,WACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADJ,EAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAAa,KAAKV,KAAL,CAAWC,IAAX,CAAgBU,kBAAhB,EAAb,MAFJ,CADJ;AAMH;;AAlC+B,C,CAqCpC;;;AACAlB,QAAQ,CAACiB,MAAT,CACI,oBAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EADJ,EAEIE,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAFJ;;AASA,MAAMC,YAAN,SAA2BtB,KAAK,CAACK,SAAjC,CAA2C;AACvCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AAACe,MAAAA,MAAM,EAAE;AAAT,KAAb,CAFe,CAGnB;;AACA,SAAKC,WAAL,GAAmB,KAAKA,WAAL,CAAiBC,IAAjB,CAAsB,IAAtB,CAAnB;AACC;;AACLD,EAAAA,WAAW,GAAG;AACV,SAAKP,QAAL,CAAcT,KAAK,KAAK;AACpBe,MAAAA,MAAM,EAAE,CAACf,KAAK,CAACe;AADK,KAAL,CAAnB;AAGH;;AAEDL,EAAAA,MAAM,GAAG;AACL,WACI;AAAQ,MAAA,OAAO,EAAE,KAAKM,WAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACK,KAAKhB,KAAL,CAAWe,MAAX,GAAoB,QAApB,GAA+B,QADpC,CADJ;AAKH;;AAnB0C,C,CAmC3C;AACA;AACA;;;AACApB,aAAa,CAACuB,UAAd","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n//ReactDOM.render(<App />, document.getElementById('root'));\n\n// function formatName(user) {\n//     return user.firstName + ' ' + user.lastName;\n// }\n\n// function getGreeting(user) {\n//     if (user) {\n//         return <h1>Hello, {formatName(user)}!</h1>;\n//     }\n//     return <h1>Hello, Stranger.</h1>;   \n// }\n\n// const user = {\n//     firstName: 'Ivan',\n//     lastName: 'De Vita'\n// };\n\n// const element = (\n//     <h1>\n//         Hello, {formatName(user)}!\n//     </h1>\n// );\n\n\n\n//const name = \"Ivan De Vita\"\n//const element = <h1> Hello, {name}</h1>\n/*ReactDOM.render(\n    element,\n    document.getElementById('root')\n)*/\n\n// const element = <h1>Hello, world</h1>;\n// ReactDOM.render(element, document.getElementById('root'));\n\n//  function tick() {\n//      const element = (\n//          <div>\n//              <h1>HELLO WORLD!</h1>\n//              <h2>It is {new Date().toLocaleTimeString()}.</h2>\n//          </div>\n//      );\n//      ReactDOM.render(element, document.getElementById('root'));\n//  }\n\n// setInterval(tick, 1000); // ogni secondo viene chiamata la callback tick - che a sua volta chiama la funzione ReactDOM.render()\n\n\n\n// function ComponenteEsempio(props) {\n//     return <h1> CIAO, {props.nome}</h1>;\n// }\n\n// // const elemento = <Ciao nome=\"Ivan\" />;\n// // ReactDOM.render(\n// //     elemento,\n// //     document.getElementById('root')\n// // );\n\n\n\n// function Funzione() {\n//     return (\n//         <div>\n//             <ComponenteEsempio nome=\"Ivan\" />\n//             <ComponenteEsempio nome=\"Luca\" />\n//             <ComponenteEsempio nome=\"Mirko\" />\n//         </div>\n//     );\n// }\n\n// ReactDOM.render(\n//     <Funzione />,\n//     document.getElementById('root')\n// );\n\n\n// function formatDate(date) {\n//     return date.toLocaleDateString();\n// }\n\n// function Comment(props) {\n//     return (\n//         <div className=\"Comment\">\n//             <div className=\"UserInfo\">\n//                 <img\n//                     className=\"Avatar\"\n//                     src={props.author.avatarUrl}\n//                     alt={props.author.name}\n//                 />\n//                 <div className=\"UserInfo-name\">\n//                     {props.author.name}\n//                 </div>\n//             </div>\n//             <div className=\"Comment-text\">{props.text}</div>\n//             <div className=\"Comment-date\">\n//                 {formatDate(props.date)}\n//             </div>\n//         </div>\n//     );\n// }\n\n// const comment = {\n//     date: new Date(),\n//     text: 'I hope you enjoy learning React!',\n//     author: {\n//         name: 'Hello Kitty',\n//         avatarUrl: 'https://placekitten.com/g/64/64',\n//     },\n// };\n\n\n// ReactDOM.render(\n//     <Comment\n//         date={comment.date}\n//         text={comment.text}\n//         author={comment.author}\n//     />,\n//     document.getElementById('root')\n// );\n\n\n\n//  function tick() {\n//      const element = (\n//          <div>\n//              <h1>HELLO WORLD!</h1>\n//              <h2>It is {new Date().toLocaleTimeString()}.</h2>\n//          </div>\n//      );\n//      ReactDOM.render(\n//         element, \n//         document.getElementById('root')\n//     );\n//  }\n\n// setInterval(tick, 1000); // ogni secondo viene chiamata la callback tick - che a sua volta chiama la funzione ReactDOM.render()\n\n// function Clock(props) {\n//     return (\n//         <div>\n//             <h1>Ciao, mondo!</h1>\n//             <h2>Sono le {props.date.toLocaleTimeString()}.</h2>\n//         </div>\n//     )\n// }\n\n// function tick() {\n//     ReactDOM.render(\n//         <Clock />,\n//         document.getElementById('root')\n//     );\n// }\n\n// setInterval(tick, 1000);\n\n\nclass Clock extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {date: new Date()};\n    }\n\n// 3. Quando l'output viene renderizzato, React invoca questo metodo - al suo intorno viene impostato un timer con cui invocare il metodo tick()\n    componentDidMount() {\n        this.timerID = setInterval(\n            () => this.tick(),\n            1000\n        );\n    }\n\n// 5. Se il componente Clock dovesse essere rimosso dal DOM, React invocherebbe questo metodo ed il timer verrebbe cancellato\n    componentWillUnmount() {\n        clearInterval(this.timerID);\n    }\n\n// 4. Ogni secondo quindi viene invocato questo metodo - ogni secondo viene cambiato lo stato e quindi React invoca ogni volta il metodo render per sapere cosa mostrare a schermo - ogni volta this.state.date avrà un valore differente e quindi verrà mostrato un output differente\n    tick() {\n        this.setState({\n            date: new Date()\n        });\n    }\n\n// 2. React invoca il metodo render - lo fa per capire cosa visualizzare a schermo - React si occupa di aggiornare il DOM in modo da farlo corrispondere all'output della renderizzazione di Clock \n    render() {\n        return (\n            <div>\n                <h1>Ciao, mondo!</h1>\n                <h2>Sono le {this.state.date.toLocaleTimeString()}.</h2>\n            </div>\n        );\n    }\n}\n\n// 1. Clocl viene passato a ReactDOM.render() - React invoca il costruttore di Clock - Clock ha bisogno di mostrare l'ora corrente, per cui inizializziamo lo stato con l'ora corrente - aggiorneremo in seguito lo stato \nReactDOM.render(\n    <Clock />,\n    document.getElementById('root')\n);\n\n\n\n\n\nclass Interruttore extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {acceso: true};\n    // Necessario per accedere al corretto valore di `this` all'interno della callback\n    this.handleClick = this.handleClick.bind(this);\n    }\nhandleClick() {\n    this.setState(state => ({\n        acceso: !state.acceso\n    }));\n}\n\nrender() {\n    return (\n        <button onClick={this.handleClick}>\n            {this.state.acceso ? 'Acceso' : 'Spento'}\n        </button>\n    );\n}\n\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"]},"metadata":{},"sourceType":"module"}